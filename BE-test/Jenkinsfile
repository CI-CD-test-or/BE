pipeline {
    agent { label 'jenkins-agent' }

    environment {
        HARBOR_REGISTRY      = '192.168.56.12:30443'  // Harbor HTTPS 주소
        HARBOR_PROJECT       = 'cicd-apps'            // Harbor 프로젝트명
        DOCKER_IMAGE_NAME    = 'backend-app'          // 푸시할 이미지명
        HARBOR_CREDENTIAL_ID = 'harbor-credential'    // Jenkins에 저장한 Harbor 계정
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build with Gradle') {
            steps {
                container('gradle') {
                    dir('BE-test') {
                        sh 'chmod +x gradlew'
                        sh './gradlew build'
                    }
                }
            }
        }

        // ✅ Docker-in-Docker 스테이지를 Kaniko 스테이지로 교체
        stage('Build and Push with Kaniko') {
            steps {
                // Jenkins Pod 템플릿에 설정된 'kaniko' 컨테이너 내부에서 실행
                container('kaniko') {
                    script {
                        withCredentials([usernamePassword(
                            credentialsId: HARBOR_CREDENTIAL_ID,
                            usernameVariable: 'HARBOR_USER',
                            passwordVariable: 'HARBOR_PASS'
                        )]) {
                            // Kaniko가 Harbor에 인증할 수 있도록 config.json 파일 생성
                            sh """
                              echo "{\\"auths\\":{\\"${HARBOR_REGISTRY}\\":{\\"username\\":\\"${HARBOR_USER}\\",\\"password\\":\\"${HARBOR_PASS}\\"}}}" > /kaniko/.docker/config.json
                            """
                            
                            // Kaniko executor를 실행하여 이미지 빌드 및 푸시
                            sh """
                              /kaniko/executor \\
                                --context `pwd`/BE-test \\
                                --dockerfile `pwd`/BE-test/Dockerfile \\
                                --destination ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} \\
                                --skip-tls-verify
                            """
                        }
                    }
                }
            }
        }
    }
}
