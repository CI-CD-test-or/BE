pipeline {
    agent { label 'jenkins-agent' }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
    }

    environment {
        HARBOR_REGISTRY      = '192.168.56.12:30443'
        HARBOR_PROJECT       = 'cicd-apps'
        DOCKER_IMAGE_NAME    = 'backend-app'
        HARBOR_CREDENTIAL_ID = 'harbor-credential'
        PROJECT_DIR          = 'BE-test'
    }

    stages {
        stage('Checkout') {
            steps {
                cleanWs()
                checkout scm
            }
        }

        stage('Build with Gradle') {
            steps {
                container('gradle') {
                    // cache 블록이 제거된 버전입니다.
                    dir(PROJECT_DIR) {
                        sh 'chmod +x gradlew'
                        sh './gradlew build --no-daemon'
                    }
                }
            }
        }

        stage('Build and Push with Kaniko') {
            steps {
                container('kaniko') {
                    script {
                        withCredentials([usernamePassword(
                            credentialsId: HARBOR_CREDENTIAL_ID,
                            usernameVariable: 'HARBOR_USER',
                            passwordVariable: 'HARBOR_PASS'
                        )]) {
                            sh """
                                echo '{"auths":{"${HARBOR_REGISTRY}":{"username":"${HARBOR_USER}","password":"${HARBOR_PASS}"}}}' > /kaniko/.docker/config.json
                            """
                            sh """
                                /kaniko/executor \\
                                    --context \$(pwd)/${PROJECT_DIR} \\
                                    --dockerfile \$(pwd)/${PROJECT_DIR}/Dockerfile \\
                                    --destination ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} \\
                                    --cache=true --cache-repo ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/cache \\
                                    --skip-tls-verify
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
            echo 'Pipeline finished. Workspace cleaned up.'
        }
    }
}
