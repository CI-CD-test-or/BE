pipeline {
    // 1. Pod 템플릿 지정 및 옵션 추가
    agent { label 'jenkins-agent' }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10')) // 빌드 기록은 최신 10개만 유지
        disableConcurrentBuilds()                      // 동시에 여러 빌드가 실행되지 않도록 방지
        timeout(time: 30, unit: 'MINUTES')             // 빌드 타임아웃 30분 설정
    }

    // 2. 환경 변수 재구성
    environment {
        HARBOR_REGISTRY      = '192.168.56.12:30443'
        HARBOR_PROJECT       = 'cicd-apps'
        DOCKER_IMAGE_NAME    = 'backend-app'
        HARBOR_CREDENTIAL_ID = 'harbor-credential'
        PROJECT_DIR          = 'BE-test' // 소스 코드 디렉터리를 변수로 관리
    }

    stages {
        stage('Checkout') {
            steps {
                // Workspace를 정리하여 이전 빌드의 영향 제거
                cleanWs()
                checkout scm
            }
        }

        stage('Build with Gradle') {
            steps {
                container('gradle') {
                    // ✅ [수정] cache 블록을 제거하여 플러그인 미설치 오류를 회피합니다.
                    // 이렇게 하면 빌드 속도는 조금 느려질 수 있으나, 파이프라인은 성공적으로 실행됩니다.
                    dir(PROJECT_DIR) {
                        sh 'chmod +x gradlew'
                        sh './gradlew build --no-daemon'
                    }
                }
            }
        }

        stage('Build and Push with Kaniko') {
            steps {
                container('kaniko') {
                    script {
                        withCredentials([usernamePassword(
                            credentialsId: HARBOR_CREDENTIAL_ID,
                            usernameVariable: 'HARBOR_USER',
                            passwordVariable: 'HARBOR_PASS'
                        )]) {
                            // Harbor 인증을 위한 config.json 생성
                            sh """
                                echo '{"auths":{"${HARBOR_REGISTRY}":{"username":"${HARBOR_USER}","password":"${HARBOR_PASS}"}}}' > /kaniko/.docker/config.json
                            """
                            
                            // Kaniko 실행 (캐시 기능은 Kaniko 자체 캐시를 사용)
                            sh """
                                /kaniko/executor \\
                                    --context \$(pwd)/${PROJECT_DIR} \\
                                    --dockerfile \$(pwd)/${PROJECT_DIR}/Dockerfile \\
                                    --destination ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/${DOCKER_IMAGE_NAME}:${BUILD_NUMBER} \\
                                    --cache=true --cache-repo ${HARBOR_REGISTRY}/${HARBOR_PROJECT}/cache \\
                                    --custom-ca-cert-file /usr/local/share/ca-certificates/harbor/ca.crt
                            """
                        }
                    }
                }
            }
        }
    }

    // 빌드 후 정리 작업 (성공/실패 여부와 관계없이 항상 실행)
    post {
        always {
            cleanWs()
            echo 'Pipeline finished. Workspace cleaned up.'
        }
    }
}
